[spring01]  2022-08-09


 tip 기능만 얻어다 쓸때 싱글톤 사용

1.툴 다운 
	1) IDE : STS4
		https://spring.io/ > project > spring tools 4 > 윈도우버젼 다운
		


		
2. Framework 프레임 워크
	우리나라에서 잘 사용하는 프레임워크  Spring, 전자정보
	
	SpringMVC	: 웹 프로그래밍 기반
	SpringAOP	: 설계기반
	SpringBoot	: 모든 설계 환경들을 합쳐놓은 것.

3. Spring Framework
	스프링 버전에 따른 눈에 띄는 변화		
	2.5 : 어노테이션을 활용하는 설정도입, 편리한 설정과 개발 가능
	3.0 : 별도의 설정 없이도 Java 클래스만으로 설정 파일을 대신할 수 있게 지원
	4.0 : 모바일 환경과 웹환경에서 많이 사용되는 REST 방식의 컨트롤러 지원
	5.0 : Reactor 를 이용한 Reactive 스타일의 개발환경 지원
	

	1)특징 
		-POJO 기반 구성 : Plain Old Java Object 
				: 일반적인 자바코드를 이용해 객체를 구성하는 
				방식을 그대로 스프링에서 사용할 수 있다.

		-MVC 웹 프레임 워크 제공 : MVC 모델 가지고 있다.

		-DI : Dependency Injection 의존성 주입*
			객체를 대여하는 개념
			무분별한 객체 생성을 줄여서 메모리 낭비 최소화 하기 위한 방법
		IoC : Inversion of Control 제어의 역전 

		- AOP : Aspect Oriented Programming 관점지향 프로그래밍 *시험
			
			POP 절차지향 	: C
			OOP 객체지향 	: Java, C++
			AOP 관점지향	: framework


	2) Spring 개발환경 세팅
		
		필요 요소(우리 수업 기준)
		- Java : JDK 11 (환경변수 설정)
		- IDE : STS (Eclipse)   intelliJ
		- 서버 : Tomcat 9 
		- DB : 오라클 19c
		- SQLDeveloper : DBMS tool !
		

	3) IDE : STS Eclipse
		Eclipse : DynamicWebproject 로 생성 > Maven gradle 로 변환
		STS     
		Intellij	
		
	4) 프로젝트 생성 방식 (라이브러리 관리 방식에 따라 구분)
		
		Spring 기본방식 : (offline 작업) Spring 라이브러리 다운받아 lib 폴더에 넣기
		Spring Maven 방식 : (online 작업) 라이브러리 관리하는 방식
		Spring Gradle 방식 : (online 작업) 라이브러리 관리하는 방식

	5) 우리가 사용할 방식
		Spring MVC Maven
		Spring 5
		STS4 Eclipse
		

	세팅 
	-window 환경설정	 인코딩 UTF-8 로

	#1. STS 다운받은 파일 원하는 폴더에 배치하고 압축해제 
		STS.exe 초록색 아이콘 나올떄까지
	#2. STS 실행 > 인코딩 UTF-8 확인
	#3. Help > Eclipse Marketplace....
		> Search에 'sts' 검색
		> Spring Tool 3 Add- on for Spring Tools 4 를 install
			> confirm >


--------------------------------------------2022-08-10------------------------------------------------------------------------------------

		
1. 스프링 세팅 
	1) STS (Spring Tool Suite) 4 에서 3로 변경해서 한다
				 

	2) STS 설치 : 한글 포함안된(데스크탑, 내문서등도 안됨) 경로에 배치하고 압축해제
		sts.exe 파일 실행

		#1. Window > Preferences > 'encoding' 검색 > UTF-8 로 변경
			

	3) 서버 세팅
		new > sever > apach 9.0 경로는 bin 이 보이는 곳 까지
		톰캣 9.0

	4) 프로젝트 생성
		File > New > Spring Legacy Project
		> Project Name : 프로젝트명 기입
		Template : Spring MVC Project 선택 > Next!
		> 기본 패키지 : 3단계로 작성. 보통 웹사이트 역순 com.naver.프로젝트명
		> Finish > 오른쪽 하단에 프로그레스바 100% 될 때까지 기다리기

		* 폴더/ 패키지 구성
		src/main/java				: 자바 클래스들 (실제 프로젝트 메인 코드들)
		src/main/resources			: 자바 프로그래밍에 필요한 보조 파일들 
		src/test/java				: 테스트 클래스
		src/test/resources				: 테스트시 필요한 보조 파일들
		src
		    main
  			webapp
				resources		: js, css, 이미지 등 위치하는 폴더
				WEB-INF
					classes		: 컴파일된 실행 파일들 위치 (우리는 사용 x)
					spring			
						appServle
							-servlet-context.xml 
							 -스프링 흐름에(img)서 view resolver담담
							: MVC 기반으로 설정할 정보 작성하는 파일
						-root-context.xml 
						 :  프로젝트에서 공용으로 설정할 정보 작성하는 파일
					views
						-.jsp 파일들 위치할 곳

		pom.xml : maven 방식으로 라이브러리 설정하는 파일 
			-maven 에서 dependency 가져와 붙이면 알아서 라이브러리 생성됨
	
					
		로그에 텍스트가 많아서 버퍼 늘려줌
		https://projectlombok.org/download 롬복 다운
	
	5) 라이브러리 세팅
		- java-version 11 로 변경
		- lombok 설치 현제 1.18.24 다운받았고 그에 맞는 dependency 가져와서 
		pom.xml 에 붙여넣어야함(https://mvnrepository.com/search?q=lombok)
		
		라이브러리를 다 추가하고 나서 프로젝트 업데이트 하는법
		프로젝트 우클릭 > Maven > update Project  하면됨
		

		스프링은 어노테이션이 아주 중요함 ex) @Controller 이런것
		서버 더블클릭해서 모듈수정하면 서버 이름 바꿀 수 있음


2. Spring 과 Oracle DataBase 연동

	1) JDBC 연결
		- 라이브러리 ojdbc8.jar 디펜던시 추가

	2) 커넥션 풀 설정 (여려명의 사용자를 수용하기 위해)
		- HikariCP **인기도 많음 빠르고 안정적 요것도 메이븐에서 가져옴



3. 테스트
	dependency : spring - test
		
	1) 테스트란?
		TDD Test Driven Development : 테스트 주도 개발  (내가 원하는 곳 작은 단위 테스트가 가능)

		단위 테스트 : Unit test : 작은단위의 테스트, 개발자 테스트

	2) JUnit 프레임워크
		: 자바 테스팅 프레임워크

		#1.JUnit 프레임 워크 사용시, 테스트 클래스 요구 조건
			-테스트 적용 메서드 public 선언
			-리턴타입 void, 매개 없는 메서드
			-메서드 위 @Test 어노테이션 기술
		
		
	

--------------------------------------------------2022-08-11----------------------------------------------------------------------------.

[spring03]	


1. 스프링 MVC 기본 구조
	XML 설정법(우리는이거씀)			Java 설정법
	-----------------------------------------------------------------------------------------------------------------------------------
	Spring MVC	- servlet-context.xml	Spring MVC	- ServletConfig.class
	Spring core	- root-context.xml		Spring core	- RootConfig.class
	MyBatis		- root-context.xml		MyBatis		- RootConfig.class

	스프링 MVC 프로젝트를 구성해서 사용한다는 의미는
	내부적으로 root-context.xml 로 사용하는 일반 Java영역(POJO)과
	servlet-context.xml 로 설정하는 Web 관련 영역을 같이 연동해서 구동하게 된다.
	webApplicationContext
	ex) [ [MVC설정] [일반설정] ]
	
	프로젝트 구동시 관여하는 XML 은 
		web.xml			: 서버(톰캣) 구동관련 설정
		root-context.xml		: 스프링 일반 Core
		servlet-context.xml		: MVC 웹 관련 




	[MVC 구조]
	
	request --> Controller <--> Model (Service, Repository(dao))
			|
		           v
	response <--    View


	[ 스프링 MVC 구조]

	request --> filter --> DispatcherServlet 	<-----> HandlerMapping
						<-----> HandlerAdapter  <--------> Controller
										    |
										Model
 									(Service,Repository)
										     |
									   	    DB			

						<------> ViewResolver
						--------> View	(JSP 및 기타)	
	response <--------
		
			

2. Controller

	- request, response 를 거의 사용할 필요없이 필요한 기능 구현
	- 다양한 타입의 파라미터 처리, 다양한 타입의 리턴타입 사용가능
	- GET/POST방식등 전송방식에 대한 처리를 어노테이션으로 처리가능
	- 상속/인터페이스 방식대신 어노테이션 만으로도 필요한 설정 가능
	
	1)@Controller, @RequestMapping
	@RequestMapping : 메서드가 처리할 요청 경로 지정
			요청 처리후 결과를 보여줄 view 이름 리턴 형태

		적용처 : 메서드 위  / 클래스 위


	servlet-context.xml 
	
	com.spring.controller 패키지 안에 있는 아이들 위에 
	어노테이션 ex) @Controller 있으면 알아서 객체 생성해준다는 뜻
	<context:component-scan base-package="com.spring.controller" />
	


	//메핑 메서드 작성
	@RequestMapping("hello")  			:url 주소를 만들어준것 속성값 지정해줄 수 도 있음
	ex) value="hello",method = {RequestMethod.GET, RequestMethod.POST}

	public String hello() {
		System.out.println("hello 매핑 메서드 호출!!!");
		
		return "hello"; // 요청 들어왔을때 보여줘야하는 view 이름 : 
		servlet-context 가보면 view resolver가 ,jsp 같은거 붙여줌 jsp 파일 로 보내주는것
	}
	

	

	2) Controller 의 리턴타입
		
		String 			: jsp 를 이용하는 경우 jsp 파일의 경로와 파일 이름을 리턴
		void 			: 요청하는 URL주소와 동일한 경로의 파일 이름으로 처리
		VO,DTO			: 주로 JSON 타입의 데이터를 만들어서 리턴하는 용도로 사용
		ReponseEntity		: 응답할때 Http 헤더정보와 내용을 가공하여 같이 전달할 용도로 사용
		Model, ModelAndView	: Model로 데이터를 리턴, view까지 같이 지정하는 경우 사용
		HttpHeaders		: 응답 내용없이 http 헤더 메세지만 전달할 용도로 사용
		
	

		Talend API Tester 확장프로그램 설치해서 서버 test 해보기
	

	3) Controller 파라미터 수집
		
		#1. 일반 매개변수 : 기본형, 문자열

		@RequestParam("파라미터명") : 요청시 넘어오는 파라미터를 
				해당 어노테이션이 붙은 매개변수에 바인딩 되도록 선언하는 어노테이션.
				붙혔을때, 매개변수명이 파라미터명과 달라도 바인딩 된다.
				안 붙혔을때 : 매개변수명이 요청파라미터명과 동일해야함(모호한 코딩방식)
	
----
	
		#2. DTO
		#3. 리스트, 배열
			-리스트
			이름이 같은 파라미터는 배열로 받아주는데 받아줄때 @RequestParam 으로 이름 지정 필요
			ex) public String hello3(@RequestParam("names") ArrayList<String> names) 
			toString 이 되어있어서 그냥 출력하면됨 

			-배열
			toString 이 안되어있음 for 문으로 출력해야함

		#4. 객체 리스트
			객체를 담은 리스트
			%5B =[	대괄호 여는 유니코드
			%5D =]
		

--------------------------------------------------2022-08-12----------------------------------------------------------------------------.

[spring04]

samplecontroller2 
SampleDtoList


구조 
	폼 > 컨트롤러 > 뷰

1. Model 전달자
	
	Controller에서 생성된 데이터를 담아서 JSP에 전달하는 역할을 하는 인터페이스.
	Controller 메서드의 매개변수에 Model 을 선언하면 
	Spring MVC에서 Model 타입 객체를 만들어주어, 
	개발자는 필요한 데이터를 담아주는 작업만 처리하면 view까지 데이터 전달된다
	
	model.addAttribute(String key, Object value);
	
	cf(유사하다는 뜻).request.setAttribute(String key, Object value);
	
	-> view에서 꺼내기 ${key}
	
	Model : 인터페이스로써 객체생성 불가능 그냥 쓰면됨
	request 쓰고싶다 그러면 클래스 이름 써서 사용해야함
		>public String pro(String id,String pw, SampleDTO dto,Model model,HttpServletRequest request ) {
	요렇게


	@ModelAttribute 가공없이 받은데이터 그대로 보내주고 싶을때 사용
		메서드 앞에 이 어노테이션 달면
		컨트롤러.java 를 거치는 경우 컨트롤러 안에 작성된 모든 
		매핑주소로 갈때 여기를 한번 거쳐서감
		
		메서드에 붙이지 않고 메서드안
		변수 앞에붙이면 변수 하나에만 효과있음
		컨트롤러로 전달받은 데이터를 강제로 Model에 담아 view에 전달하도록 할 때 
		사용하는 어노테이션.

		--
		매개변수 앞에 붙히면 해당 view 까지 데이터 별칭달아 전달.
		데이터를 리턴하는 일반 메서드 위에 붙히면
		해당 클래스에 있는 모든 요청 페이지가 연결하는 view 들에 
		리턴하는 데이터 전달.


		jason jackson - 다운(dto나 객체단위 출력해주기 위해서)
		https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind/2.13.3


2. Controller 리턴타입
	
	String 			
	void			
	VO,DTO			
	ResponseEntity		
	Model,ModelAndView	
	HttpHeaders				


3. 의존성 주입 Dependency Injection
	의존 : 객체와 객체간의 의존을 말한다.
		A 객체에서 B 객체를 필요로 한다면, A객체는 B객체에 의존한다~
	
	의존성 주입 : 의존하는 객체를 직접 생성하는 대신, 의존 객체를 전달받는 방식

	property & field == 변수
	constructor-arg == 생성자 매개변수



--------------------------------------------------2022-08-17----------------------------------------------------------------------------.

[spring05]
	
1.myBatis(ORM: object relational mapping)
	SQL 매핑 프레임워크라고도 함
	객체 지향언어인 자바의 관계형 데이터베이스 프로그래밍을
	좀 더 쉽게 할 수 있도록 도와주는 DB관련 개발 프레임 워크

	API Doc : https://mybatis.org/mybatis-3/ko/index.html
	
	전통 JDBC 프로그램 사용할경우 		MyBatis 사용 사용할 경우
	-직접 Connection 맺고 close()		자동으로  Connection, close()
	-PreparedStatement 직접 생성/ 처리		MyBati 내부적으로 pstmt 처리
	-pstmt setXXX() 등에 대한 처리 직접		#{속성명} 과 같이 지정하면 내부적으로 자동처리
	-ResultSet 직접처리			리턴타입 지정하는 경우 자동으로 처리


	1) 라이브러리 추가
		-mybatis
		-mybatis-spring
		-spring-jdbc	: jdbc
		-spring-tx	: 트랜젝션
 
	2) SQLSessionFactory

		Mybatis 에서 가장 핵심적인 객체는 SQLSession(커넥션이랑 같은역할) 이라는 존재와 SQLSessionFactory이다					SQLSessionFactory 빈으로 등록. root 에 등록했음
			property 오버라이딩 해서 값 수정해줌
			<property name="dataSource" ref="dataSource"/>		: 히카리 데이터와 연결되는중
			<property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
								 : 별칭달기위해  오버라이딩함

	3) 스프링과 연동처리 
		Mapper = SQL 과 그에 대한 처리를 지정하는 역할하는 것.
		*Mapper 적용방법
	
			1. XML 파일 이용		: 복잡한 쿼리문 실행시 (+인터페이스) 
			2.인터페이스 + 어노테이션 	: 간단한 쿼리문 실행시  : 이걸 주로 쓸것임

		#2번방법. Mapper. 인터페이스 + 어노테이션
		#1번방법. XML (+인터페이스) 


	-root- context-

	<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	--xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring" 	:마이바티스 추가하면
	
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	https://www.springframework.org/schema/beans/spring-beans.xsd
	--http://mybatis.org/schema/mybatis-spring				: 이렇게 2줄 추가해줘야함
	--http://mybatis.org/schema/mybatis-spring-1.2.xsd">


	테스트 해보기
	root 설정하고 테스트 클래스 만들어서 작게 테스트 해보기 다 작성후에 알트 쉬프트 엑스 티

	메퍼 쓰는 법 (sql문 관리하는법) beans 같은 아이
	https://mybatis.org/mybatis-3/ko/getting-started.html 마이바티스 > 시작하기 에서 따오기

	<!DOCTYPE mapper
 	 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 	 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

	//이건 별칭다는거 세팅할때 - mybatis-config.xml 에 사용했음
	<!DOCTYPE configuration
  	PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
 	 "http://mybatis.org/dtd/mybatis-3-config.dtd">

	*****************      xml에서 mapper태그를 작성할떄 namespace 를 꼭작성해야함 !!!!      *********************


	선생님이 준 
	 log4jdbc.log4j2 받고 root 에서 DB 관련 경로 바꿔줬음 

		
		<property name="driverClassName" value="oracle.jdbc.OracleDriver" /> 
		<property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.100.250:1521:ORCL" />	
		를 
		이렇게
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy" /> 
		<property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@192.168.100.250:1521:ORCL" />

		바꾼 이유 : 실제 내부에서 어떤일이 일어나는지 로그를 상세히 보여주기 위해
	
		
	4) SQL 태그
		# 태그명 : select, insert ,update, delete 같이 각 쿼리문에 따른 태그 존재함.
		# 속성
			id : 태그의 id 부여(함께 사용하는 인터페이스의 메서드명과 동일)
			resultType : 쿼리문 실행 후 결과에 따른 리턴타입
					속성값 : int, string, DTO 주로 사용  // 마이바티스에서 타입쓸때는 소문자
					컬럼의 개수와 타입을 기준으로 지정!

					레코드가 여러개인것은 인터페이스의 메서드 리턴타입으로 지정
					(그냥 다 List로 묶기)

			parameterType :  쿼리문 실행시 외부에서 던져준 바인딩 되어야하는 데이터의 타입을 명시
					속성값: int. string, DTO, hashmap
					
					jdbc api로 개발시 사용하던 placeholder(?)
					더이상 사용 안하고 #{ } 로 물음표을 대신할것임

					int, string 같은 단일 데이터는#{value} 로 매칭 파라미터 2개일때는 또 다름
					dto는 #{변수명} 
					hashmap은 #{키값} / 해쉬맵에 객체 들어있을경우 #{키값.변수명}
					
		내가작성
		xml 과 인터페이스 같이 사용 흐름
		1.인터페이스에 추상 메서드 하나추가 
		2.xml가서 추상메서드와 맞는 sql 문 추가 resultType 까지 지정
		3.test 폴더 가서 root-context 경로 지정해주고 root에서 타고가서 객체 주입받으면 됨
			-주입받을떄 객체 생성하는거 잊지말기
			@Autowired
			private SampleMapper sampleMapper;


--------------------------------------------------2022-08-18----------------------------------------------------------------------------.
[spring 06]

1.데이터를 여러개 보낼때 @Param("id") String id 이런식으로 파람으로 지정해 줘야하고 xml 에서 #{파람에서 지정한별칭} 해줘야함


동적 SQL

	if

	선생님이 보내준 사진  before , after
		

	프로젝트 세팅 순서
	1.프로젝트 생성 레거시
	2.jdK 버전 11로 바꿔줌 > pom.xml 디팬던시들 추가 > root 가서 DB 연결 해주기 연결할때 diverClassName에
		스파이써서 로그 많이 띄워주기위해 resource에 log4jdbc~.property 파일 추가
	3.log4j.xml 들어가서 root logger 에서 로그레벨 info 로 바꿔줌
			로그 레벨 (심각한 순서)
			FATAL
			ERROR
			WARN	: 경고
			INFO	: 정보
			DEBUG	: 디버깅
			TRACE	: 추적
	






2. 스프링 MVC 프로젝트 기본 구성
		
	Presentation <--> Business <--> Persistence tier

	Presentation tier 	: 화면 계층	: 화면에 보여주는 기술을 사용하는 영역 (JSP)
	Business tier 	: 비지니스 계층 	: 순수한 비지니스 로직을 담고있는 영역 	
			  xxxService 와 같은 이름으로 구성
	Persistence tier	: 영속계층 또는 데이터 계층 	

	[Spring MVC] <-->[Spring Core <-->[Spring-mybatis] <--]--> [MyBatis] <--> [Oracle]
	servlet-context.xml	 	root-context.xml	   mybatis-config.xml

	Client -----> DispatcherServlet --> Controller  ----> Model
					 | viewResolver	
				 	 V
	Client  <----------------------------------View


	Controller ----> xxxService(i) ---> xxxServiceImpl(c) 
	@Controller			@Service
	---> xxxDAO(i) ---> xxxDAOImpl(c) --> xxxMapper(i) ---> xxxMapper.xml ---> DB
			@Repoditory 
				DB까지 갔다가 다시 순서대로 되돌아옴

	


3. 회원가입 
	
	1) 각 영역에 Naming Convention (명명 규칙)	

		xxxController : Controller 클래스
		xxxService	: 비지니스 영역
		xxxDAO, XXXRepository : DAO, Repository(저장소) 
		xxxMapper	: DAO 대신 매퍼 씀
		VO, DTO

	2) 패키지 관리
		com.member.controller	: 컨트롤러 클래스
		com.member.service	: 서비스 인터페이스와 구현 클래스
		com.member.domain	: VO, DTO
		com.member.persistence	: mapper 인터페이스(dao)
		com.member.util		: 유틸 클래스들
		com.member.aop		: aop관련



--------------------------------------------------2022-08-19----------------------------------------------------------------------------.

// Controller > service interface > Server impl > Mapper interface + xml > DB

view에서 form 페이지 만들고 submit 해주면 controller 로 가게되고 
보내는 방식에따라 따는 메서드가 정해진다 메서드에서 객체를 생성 해서 받는다.
메서드(보내고싶은 데이터)

-service 에서 메서드이름 짓고
-service 폴더에 Impl 하나 생성해서 구현한다. @Service를 붙여줘서 자동으로 객체생성 받음 
	(비지니스 영역을 담당하는 객체임을 표시해줌)

service 는 root 에서 관리하므로 root-context 에서 빈으로 객체생성한다는 코드 작성한다.
마이바티스로 mapper 스캔도 추가해줘야함

다시 컨트롤러로 가서 메서드 호출하고 메서드 내용은 impl 해주면 된다. 호출할떄 mapper 의존성 주입

DB를 실행시킬 매퍼가 필요하므로 persistence 에서 mapper 인터페이스 & xml작성 

xml 에서 doc 타입 해주고



--------------------------------------------------2022-08-23----------------------------------------------------------------------------.

1게시판

	1) 패키지
		com.board.controller
		com.board.service
		com.board.persistence > 우클릭 new junitTestCase 해서 DB 연결 테스트 해보기
		com.board.domain

	2) 테이블 생성(sqlDeveloper)
		테이블명 springBoard
		시퀀스    springBoard_seq

	3) VO
		BoardVO (DTO) 랑 같은것
		

	4) 요청 주소 정리 

		작업		URL		Method		Parameter	이동	    redirect/jsp
		-------------------------------------------------------------------------------------------------------------------------
		전체 리스트 	/board/list	GET						0
		글 등록처리	/board/write	GET						0
		등록 처리	/board/write	POST				list		X	
		내용조회		/board/read	GET		bno				0
		삭제 		/board/delete	POST		bno				X
		수정폼		/board/modify	GET		bno				0
		수정처리		/board/modify	POST		VO		read		X
		-------------------------------------------------------------------------------------------------------------------------

		부트스트랩 다운하는법
		https://startbootstrap.com/theme/sb-admin-2

		다운후 복붙해서 경로 바꿔주기


		view > incloud 생성
			헤더 만들기 > tables 눌러서 복붙 경로바꿔주기





--------------------------------------------------2022-08-24----------------------------------------------------------------------------.



	부트스트랩 Modal : https://getbootstrap.com/docs/4.0/components/modal/
	모달 : alert 같은거임
	페이징 처리하는법


2.Oracle 의 Index

	B-Tree	: 주로 OLTP 데이터 베이스에서 사용
	BITMAP	: OLAP 데이터 베이스에서 주로 사용
	함수기반	


	인덱스
		-검색 속도가 빨라 질 수 있다. 인덱스는 정렬이 미리 되어있는 아이
		- 처음 인덱스 생성시 시간 많이 소요 될 수 있다.
		- 데이터 변경 작업이 자주 일어날 경우에는 오히려 성능이 나빠질 수 있다.
		- 테이블의 컬럼 단위에 생성되며, 하나의 열에 인덱스를 생성할 수 도 있고,
		- 여러 열에 하나의 인덱스를 생성할 수도있다.
		- 테이블 생성시 primary key 를 만들면 인덱스가 자동 생성된다.
		 

	오라클에서 인덱스 사용방법
		SELECT /*+ 힌트 */ 컬럼명.... FROM 테이블명;
		
		힌트 : 힌트명(테이블 명)

		1) FULL 힌트 (모든 데이터 스캔)
			SELECT /*+ FULL(테이블 명) */ 컬럼명.... FROM 테이블명;			
		2) INDEX_ASC, INDEX_DESC 힌트
			SELECT /*+ INDEX_ASC(테이블 명, 인덱스 명) */ 컬럼명.... FROM 테이블명;			


		xml 작성할때 <![CDATA[여기 ]]> 들어가는 아이들을 문자열로 취급하겠다라는뜻
		pstmt사용할때는 # 변수 나 객체 사용할때는 $





--------------------------------------------------2022-08-25----------------------------------------------------------------------------.

1.게시판 검색 처리
	검색조건		조건 구분 값(jsp select 태그 option 에 걸어둘 데이터 value값)
	-------------------------------------------------------------------------------------------------
	제목	title		T
	내용	content		C
	작성자	writer		W

		select bno, title, writer, reg 
			from 
			(select /*+ INDEX_DESC(springBoard pk_springBoard) */ 
		 	rownum r, bno, title, writer, reg 
		 	from springBoard 
		 	where title like '%검색어%' and rownum <= 10 )
		 where r >0;
		
		
		마이바티스 사용한다면 이렇게
		select bno, title, writer, reg 
			from 
			(select /*+ INDEX_DESC(springBoard pk_springBoard) */ 
		 	rownum r, bno, title, writer, reg 
		 	from springBoard 
		 	where ${sel1} '%||#{keyword }||%' and rownum <= 10 )
1. 컬럼명을쓸떄 #{sel} 을 쓰면 홑따옴표가 붙어오기 때문에 EL 문으로 작성해줘야한다. ${이} 이렇게

			where (${sel1} '%||#{keyword }||%' or ${sel1} '%||#{keyword }||%' ) and rownum <= 10 )
2 or연산자가 and보다 나중순위기 때문에
			where (	#1. title  like '%||#{keyword }||%'
				#2. content like '%||#{keyword }||%' 
				#3. writer like '%||#{keyword }||%' 


				#4. writer like '%||#{keyword }||%' 
				#5. writer like '%||#{keyword }||%' 

			) 
			and rownum <= 10 )

		 where r >0;
		컬럼명을쓸떄 #{sel} 을 쓰면 홑따옴표가 붙어오기 때문에 EL 문으로 작성해줘야한다. ${이} 이렇게
			
	쿼리문 안에서 문자열 연결할때는 || 을 쓴다

	제목 or 내용			TC
	제목 or 작성자			TW
	제목 or 내용 or 작성자		TCW	






2. 파일 업로드

	1) 라이브러리
		commons-fileupload, commons-io.jar 파일이름 중복처리가 안됨 직접 코드로 작성해야함
		https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload   	:
		https://mvnrepository.com/artifact/commons-io/commons-io			: io
	
	2) MultipartResolver 
		<property name="maxUploadSize" value="-1"></property>	//-1 파일제한 없음
		
	
			
	3) 파일 업로드 작업
		MultipartHttpServletRequest- 스프링이 제공해주는 interface 중 하나
		
		Iterator<String> 		getFileNames()	: 업로드 된 파일들의 파라미터명 리턴
		MultipartFile 		getFile(Stirng name): 파라미터명이 name인 파일정보 리턴
		List<MultipartFile>		getFiles(String name)
						: 파라미터명이 name인 업로드 파일 정보 목록 리턴

		*작업순서
		- 처리 매핑 메서드에 매개변수 MultipartHttpServletRequest request지정
		- request 에서 파일정보 꺼내담기
		- 파일 저장 경로 + 새 파일명 만들어 file 객체 만들기 (파일이름 중복 안되게)
		- .transferTo() 메서드로 파일 저장
	
		UUID 
	




3. 파일 다운로드
	요청 경로랑 파일만 연결해 주면 된다.

	1) 우선순위 지정  servlet- cont 에 바꿔놨는데
		property order를 지정해줌 
		order =0 뜻 1 빈으로 등록된에중에 이름이 일치하는 아이가 있으면 그거부터 실행하고
		order =1 없으면 jsp 페이지에서 찾아서 리턴해줌
	2) DownloadView.java 가 실행되려면 객체생성 되어있어야 하므로 기능 사용위해 bean 으로 등록
	3) jsp 페이지에 다운로드용 버튼 하나 만들고 요청 경로 지정
	4) Controller 에서 해당 요청 처리 매핑 메서드 만들어 DownloadView 의 기능 호출
	
		


--------------------------------------------------2022-08-26----------------------------------------------------------------------------.

[spring09]

1. Spring AOP Aspect Oriented Programming
	여러 객체에 공통적으로 적용할 수 있는 기능을 분리해서
	재사용성을 높혀주는 프로그래밍 기법.
	핵심기능 구현을 분리함으로써 핵심기능 구현 코드 수정없이 
	공통기능을 적용할 수 있게 만들어줌.

	1) 개념			
	# 기술적 구분 		
	절차지향			
	객체지향			
	#개념적 구분 			
	관점지향 (AOP)	: 상황에 맞게 융통성으로 개발하는 방법
	
	
	# 횡단 관심사 분리 : cross-cutting concern 
	핵심 기능과 구분하기 위해 공통기능을 횡단관심사로 분리하여 
	프로그램을 설계하는 기술이 AOP 이다.

	#프록시 : proxy  						//재귀함수 factory 다시 공부!!
	왜 interface 를 만들었을까 
	: spring 은 기본적으로 인터페이스로 돌아간다 프록시 기반이기 때문
	: 개발을 할때 interface 가 있으면 리턴타입이나 매개변수가 지정돼있기 때문에 
	결국 최종 구현을 했을때 모두 호환 가능해서

	proxy 는 인터페이스 기반으로 돌아간다. 인터페이스가 없으면 적용안된다.



		프록시가 타겟을 감싸고 있다고 생각하면됨
	1) 용어 
		Target 		: 핵심 비지니스 로직 처리가 되어있는 객체
		Join Point 	:  Target 이 가지고 있는 메서드 . 특정 작업이 시작되는 시점
					Advice를 적용할 수 있는 지점.
		
		Advice : Joinpoint 에 삽입 되어져 동작할 수 있는 코드.
				"언제" 공통관심 기능을 핵심 로직에 적용할 지를 적용하고 있다.
		
		PointCut	: Advice 가 적용되는 Jointpoint 를 말함.
			Advice를 어떤 joinpoint 에 결합할 것인지를 결정하는 설정
			실제 관점. 발생하는 상황.

		Advisor	: Advice와 Pointcut 을 하나로 묶어서 말함
		Weaving : Advice 를 핵심 로직 코드에 적용하는 것을 말함.
		Aspect	: 공통 관심사항, 여러 객체에 공통으로 적용되는 기능을 말함.

	2) 3가지 Advice Weaving 방식
		# 컴파일 시 weaving	: AspectJ 사용방식
		# 클래스 로딩시 weaving	: AspectJ 지원
		# 런타임 시 weaving	: 프록시를 이용. 핵심로직 구현 객체에 직접 접근이
			 아니라 프록시를 통해 핵심로직 객체에 접근. 메서드 호출될때만 Advice 
			  적용 가능하다.


	3) Spring AOP
		
		스프링 AOP 구현 방법 3가지
		-XML 스키마 기반의 POJO 클래스 이용한 AOP 구현
		-AspectJ 에서 정의한 @Aspect 어노테이션 기반의 AOP 구현
		-스프링 API 를 이용한 AOP 구현

		* Proxy 이용하여 구현
		client ---> Controller ---------- Model Proxy ----------> Model 	(메서드실행전 적용)
					<----Model Proxy ------		(메서드 실행 후 적용)


	4) Advice
		프록시로 메서드 호출 시 Aspect를 적용하기 때문에 구현가능한
		Advice 종류는 아래와 같이 있다.

		Before		: 타겟 메서드 동작 전 실행
		AfterReturning	: 타겟 메서드 정상 종료 후 실행 
		AfterThrowing	: 타겟 메서드 동작중 예외 발생시 실행
		After		: 타겟 메서드 종료 후 실행 
		Around		: 타겟 메서드 동작 전 후 또는 예외발생시점에 실행 위의 4개 통합
				ProceedingJoinPoint 의 Proceed() 로 공통기능 처리 후 가던길 가라~ 가능

2.AOP 설정


	AspectJ Weaver
	https://mvnrepository.com/artifact/org.aspectj/aspectjweaver

	1) 라이브러리 추가
		Spring-aop 	: 이미 존재함
		aspectjweaver	: AOP 적용 가능한 어노테이션 등 제공


	2) AOP 설정

		*XML
		[aop 태그]
		<aop:config>	: aop 설정 정보임을 나타냄
		<aop:aspect>	: Aspect 설정
		<aop:pointcut>	: Pointcut 설정
		<aop:around>	: Advice 설정 before, after.....

		
		태그 구조
		#구조1	
		<aop:config>
			<aop:aspect id="관점이름" ref="타겟 클래스의 id 값(공통기능 클래스의 id 값)">	
				<aop:pointcut id="이름" expression="표현식으로 발생상황 기술"/>(언제 위빙이 되는지)
				<aop:around  pointcut-ref="포인트컷이름" method="공통기능메서드"/>
			</aop:aspect>	
		</aop:config>


		#구조2
		<aop:config>		
			<aop:pointcut....../>			
			<aop:pointcut....../>			
			.......
			<aop:aspect ref.....>			
				<aop:before/>
				<aop:after/>
			</aop:aspect ref>			
		</aop:config>


		3) Pointcut 표현식
			Advice 적용 범위 설정 -> 표현식 이용
			
			1) execution 명시자 
				execution(접근지정자 리턴타입 클래스이름패턴.메서드 이름패턴(파라미터패턴))
				
				접근지정자 : 생략가능. 스프링AOP 에서는 public 메서드에만 적용가능
				리턴타입 : * 은 모든 리턴타입 
				클래스이름 패턴 : 클래스명 패턴으로 명시 (생략가능)
				메서드 이름 패턴 : 메서드명 패턴으로 명시
				파라미터 패턴 : 마라미터를 패턴으로 명시
				
				* : 모든~
				.. : 0개 이상
				접근지정자,패키지명은 생략하면 아무것도 안써줌				

				execution(public void set*(..))	
				: 메서드이름이 set으로 시작하는 메서드 다 매개변수가 0개 이상
				execution(* test.ex01.spring.*.*())	
				: 모든 리턴타입에 test.ex01.spring의 모든클래스의 매개변수 없는 모든 메서드
				execution(* test.ex01.spring..*.*(..))	
				: spring 패키지와 그 하위에 있는 모든 클래스 안에 모든메서드(매개변수 상관없는) 
				리턴타입도 상관없는.
				execution(* get*(*,*))	
				: 메서드 이름이 get으로 시작하는 메서드 다, 매개변수가 2개여야하고 타입상관 x
				execution(* read*(Integer,..))		
				: 리턴타입 아무거나 클래스 생략 이름이 read 인 메서드로 시작하는 매개변수가 int 하나는
				꼭 포함하는 .

				
			<aop:config>
				<aop:pointcut expression="execution(* com.board.service.TestService*.*(..))" id="pc1"/>
				<aop:aspect ref="advice">
					<aop:before method="beforeAD" pointcut-ref="pc1"/>
			
				</aop:aspect>
			</aop:config>	

			: 1)리턴타입 전부 testservice로 시작하는 모든클래스의 모든메서드인데 > 파라미터가 0개이상인것들 >
			을 실행하는데 언제하냐면

			2)<aop:aspect ref="advice">bean으로 등록한 객체에 링크를 걸어서 빈을 가져오면
			com.board.aop의  advice.java 에 가게되고 
		 	
			3)<aop:before method="beforeAD" pointcut-ref="pc1"/> 1번이 실행하기전에 메서드이름이
				beforeAD인것부터 실행하고 pc1 을 실행한다.
				
			<aop:around method="around" pointcut-ref="pc1"/> ** 중요 
			
			
				
			2) within 명시자 
				특정 타입에 속하는 메서드를 설정할때. 정확하게 타겟 지정
				within(test.spring.mvc.HelloService)	: 이 클래스에 있는 모든 메서드 호출될때
				within(test.spring.mvc.*)	
				within(test.spring.mvc..*) : mvc 패키지에 있는 모든 클래스의 모든메서드 또는 하위까지
	
			3) bean 명시자
				스프링에서 추가적으로 제공하는 명시자
				스프링빈 이름을 사용하여 정의
				
				-context.xml
				<bean id="hello" class="......"/>								

				bean(hello) : hello 라는 id 값으로 등록된 스프링빈 객체안의 메서드들 호출될때
				bean(hello*) : hello 로 시작하는 id 값으로 등록된 빈...

		4) 어노테이션 기반 AOP 설정 
			포인트컷 어디서 실행할지 범위 지정해주는 것.		
			xml 또는 어노테이션 둘중 하나만 사용가능
			AspectJ Weaver 추가 했다면 어노테이션 사용가능
	
			@Aspect
			@Pointcut
			
			#1.root-context.xml
				<aop:aspectj-autoproxy />
			

		1------------------------------------------------------------------------------
		@Around("excution(* board.service.TestService*(..))")
		public Object around(ProceedingJoinPoint j) throws Throwable{
		
		// before
		Object obj = j.proceed();
		//after
		return obj;
		}
		2------------------------------------------------------------------------------			
		@Around("excution(* board.service.TestService*(..))")
		public Object around(ProceedingJoinPoint j) throws Throwable{
		
		// before
		 리턴을 바로하면 before만 달 수 있음
		
		return  j.proceed();
		}

--------------------------------------------------2022-08-29----------------------------------------------------------------------------.
[spring10]

1. 스프링 시큐리티

	스프링 시큐리티는 서블릿의 필터와 인터셉터를 이용해 처리된다.
	
2. 설정 
	1) 라이브러리 추가 
		Spring-security-web
		https://mvnrepository.com/artifact/org.springframework.security/spring-security-web

		spring-security-config
		https://mvnrepository.com/artifact/org.springframework.security/spring-security-config/5.2.9.RELEASE

		spring-security-core
		https://mvnrepository.com/artifact/org.springframework.security/spring-security-core/5.2.9.RELEASE

		spring-security-taglibs(JSP 에서 security 관련 태그 사용하고 싶을때.)
		https://mvnrepository.com/artifact/org.springframework.security/spring-security-taglibs/5.2.9.RELEASE




	2) security-context.xml 생성
	시큐리티는 설정 파일 따로 관리할 것임
	읽어 들일때 최소한에 구조가 필요함
	<security:http>
	<security:form-login/>

	</security:http>
	
	<security:authentication-manager>
	
	</security:authentication-manager>




	root 같은 경로 > 우클릭 >스프링 빈 configration 파일 누르기> security-context.xml 이름 
	> next > beans,security 체크 후 선택안하고 디폴트 > 


3. 시큐리티가 필요한 URI 설계
	권한에 따라 접근을 제한 할 수 있다.
		
		1) 권한 
		ROLE_GUEST	비회원
		ROLE_USER	사용자
		ROLE_MEMBER	회원
		ROLE_ADMIN	관리자
		
		2)URI
		/common/main	: 로그인, 비로그인 모두 가능
		/common/signup	: 비로그인
		/common/login	: 비로그인
		/member/mypage	: 로그인
		/member/modify	: 로그인
		/member/delete	: 로그인




4.인증 Authentication , 권한부여 Authorization

	Authentication-Manager	: 인증을 담당하는 매니저 ***
	
		-AuthenticationProvider  (인증 처리 객체)
			<--> UserDetailService(인증을 위한 권한 정보 처리)

	
	
5. 스프링 시큐리티 표현식
	hasRole(롤)	
	hasAuthority(권한)
	
	hasAnyRole(롤,롤)
	hasAnyAuthrity(권한,,,)

	principal			: 현재 사용자 정보를 의미함
	permitAll			: 모든사용자에게 허용
	denyAll			: 모든 사용자에게 거부
	isAnonymous()		: 익명의 사용자의 경우(로그인 안한 경우도 해당)
	isAuthenticated()		: 인증이 된 사용자면 true(로그인 한 경우)
	isFullyAuthenticated()	: Remember-me(자동로그인)로 인증된것이 아닌
					인증된 사용자인 경우 true


6. 회원 테이블 , 권한 테이블 생성
	
7. BcryptPasswordEncoder(패스워드 암호화) 클래스 이용하여 비밀번호를 보호 할 수 있게 세팅(sql 에서도 비밀번호 암호화)
   맞는지 아닌지는 체크만 가능하게 해줌

	클래스 사용하기 위해 bean 으로 등록

8. 커스텀 회원가입 / 로그인 처리를 위한 CustomUserDetailsService 구현
	스프링 시큐리티에서 JDBC를 이용하는 방식으로 로그인 처리를 할 때
	Default 반식으로는 처리 한계가 있어
	UserDetailsService 를 커스텀화 하여 프로젝트에 맞게 변형해서 사용하도록 한다.
	1.https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/core/userdetails/UserDetailsService.html
	
	UserDetailsService 는 리턴타입이  UserDetails 이므로 class 가 하나 더 필요하다
	2.https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/core/userdetails/UserDetails.html
	구현해야한다는것은 구현부를 우리가 만들어야 한다는것
	
	#1. MemberVO, AuthVO  두가지 추가
	#2. 스프링 시큐리티를 이용하여 권한 인증 처리를 위한
		CustomUserDatailsService 구현 클래스 만들기 (UserDetailsService 를 구현해놓은 구현체)
	#3.MemberVO를 UserDetails 타입으로 변환하기 위해, 
		스프링이 제공해주는 User 클래스를(UserDetails를 구현한 클래스) 상속받아 구현하는 CustomUser클래스 생성해서 리턴

	#4. MemberMapper 구현 
		
	

	스트림의 개념을 한번 공부하자
	vo.getAuthList().stream()  : collect 타입은 스트림을 다 가져올 수 있음


	<resultMap type="com.member.domain.MemberVO" id="memberMap">
		<id property="id" column="id"/> 프라이머리키 명시 해준것
		<result property="id" column="id"/>
		<result property="pw" column="pw"/>
		<result property="name" column="name"/>
		<result property="email" column="email"/>
		<result property="gender" column="gender"/>
		<result property="reg" column="reg"/>
		<result property="enabled" column="enabled"/>
		
		<collection property="authList" resultMap="authMap"></collection>	
	</resultMap>
	
	** 시큐리티 로그아웃 처리
	url 주소는 시큐리티에 내장된 logout 서비스로 로그아웃 해주고
	세션 지우고 세션을 구분하기위한 세션이름을 저장해주는 쿠키도 지우고 로그아웃후 이동할 페이지도 설정해 준다.
	<security:logout logout-url="/logout" invalidate-session="true" delete-cookies="JSESSION_ID" logout-success-		url="/common/main"/>
	


--------------------------------------------------2022-08-30----------------------------------------------------------------------------.


9. 회원 가입 처리
	- BcryptPasswordEncoder 로 pw 변경하여 등록 처리
	- 

10. 로그인 처리


11. 자동 로그인 Remember-me
	로그인 되었던 정보를 데이터 베이스를 이용해 기록해 두었다가 
	사용자의 재방문시 세션에 정보가 없으면 데이터베이스를 조회해서 사용하는 방식
	<security:remember-me data-source-ref="dataSource(히카리데이터 이름 지정해놧음)" token-validity-seconds="쿠키의 지속시간" />
		
	#1. 스프링 시큐리티에서 기본적으로 지정한 형식의 테이블생성
	#2. security-context.xml < ..: remember-me/> 태그로 설정


12. 로그아웃
	시큐리티가 처리하도록 이용
	
	* 로그아웃 요청 옵션	
	url :/logout
	method : post
	
	* 설정 security-context.xml
	<security:logout/>

	security -context.xml에서 인증처리할때 DB를 <security:remember-me data-source-ref="dataSource" token-validity-	seconds="604800" />  이런 식으로 이미등록된 히카리를 사용하는데 이것은 root-context.xml 이 부모격이라서 가능한것이다.
	폴더가 다르더라도 root 에서 지정된건 모두 꺼내서 사용할수 있다. 반대로 servlet 에 등록된 bean 들은 접근이 불가	




	구멍가게코딩단
	최범균 기초중급
	토비의 스프링 3.1
	이것이자바다


--------------------------------------------------2022-08-31----------------------------------------------------------------------------.
[spring 11]

1.REST API

	URI	: Uniform Resource Identifier : 자원 식별자	: 당신이 원하는 곳의 주소는 여기다~
		: 도메인뒤부터 URI
	URL	: Uniform Resource Locator	: 자원의 장소	: 여기가면 원하는것을 찾을 수 있다.~
		: 모든 주소

		? 뒤는 쿼리 스트링
		
	REST REpresentational State Transfer
		하나의 URI 는 하나의 고유한 리소스를 대표하도록 설계된다. 라는 취지를 가지고 있다.
		+ 전송방식을 결합해서 원하는 작업을 지정해주도록
		
		--> 서버에서 리턴하는 것이 테이터 이다 (view 가 아니다)		


		/board/23 + get/post/put/delete

	1)REST 관련 어노테이션들
		@RestController	: Controller + REST	
		@ResponseBody	: 일반적인 JSP 같은 뷰가리턴되지 않고, 데이터 자체를 전달하는 용도
		@PathVariable	: URL 경로에 있는 값을 파라미터로 추출할 때 사용
		@RequestBody	: JSON 데이터를 원하는 타입으로 바인딩 처리



	2) REST 사용위한 라이브러리
		- jackson-databind
		- jackson-dataformat-xml
		https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-xml/2.13.3	
		- gson
		https://mvnrepository.com/artifact/com.google.code.gson/gson/2.8.9	
		

2. @RestController

	@RestController 이전에는 @Controller + 메서드위에 @ResponseBody 를 이용해서
	작업하였었다. 
	@RestController는 메서드의 리턴타입으로 사용자가 정의한 클래스타입을 사용할 수 있고,
	이를 JSON 이나 XML 로 자동으로 처리할 수 있다.

	* JSON
	구조가 있는 데이터를 {}로 묶고, 키와 값으로 구성하는 경량의 데이터 포맷
	{
		"name" 	: "피카츄",
		"age"	:  20
		"hobby"	: ["낮잠","영화보기"]
		"grade"	: {"국어":100,"수학":30,"영어:"50},
		
	}
	
	
	1) 리턴 타입
	* 단순 문자열 리턴	: String
	* 객체 리턴		: SampleVO
	* 컬렉션 타입 객체 리턴 	: list, map
	* ResponseEntity		: 데이터 + Header 정보까지
	
	2) 파라미터
	@PathVariable 		: 일반 컨트롤러에서도 사용이 가능하지만, REST 방식에서 자주 사용됨.
				URL 경로의 일부를 파라미터로 사용할 때 이용
				
				Rest방식에서는 URL 주소에 최대한 많은 정보를 담으려고 노력함.
				http://localhost:8080/sample/{nums}
				http://localhost:8080/sample/{nums}/page/{pageNum}

				{}로 처리된 부분은 컨트롤러의 메서드에서 변수로 처리가 가능하다.

	@RequestBody		: JSON 데이터를 원하는 타입의 객체로 변환해야하는 경우에 주로 사용.
				전달된 요청의 내용(body)을 이용해서
				일치하는 파라미터의 타입으로 변환을 요구 할 수 있다.
				내부적으로 HttpMessageConverter 타입의 객체들을 이용해서
				다양한 포맷의 입력데이터를 변환 할 수 있다.
				대부분의 경우에는 JSON 데이터를 서버에 보내서
				원하는 (자바)타입의 객체로 변환하는 용도로 사용되고,
				경우에 따라서는 원하는 포맷의 데이터를 보내고,
				이를 해석해서 원하는 타입으로 사용하기도 한다.
	
	


3. 전송방식
	REST 방식의 데이터 교환에서 가장 특이한 점은
	기존의 GET/POST 외에 다양한 방식으로 데이터를 전달 한다는 점이다.

	CRUD	전송방식	
	Create	POST
	Read	GET
	Update	PUT
	Delete	DELETE

	ex) 회원가입 member
	작업	URI
	--------------------------------------------------------------------------------------
	등록	POST	/member/new
	조회 	GET	/member/{id}
	수정	PUT	/member/{id} 	+ body(json 데이터 등)
	삭제	DELETE	/member/{id}	
	--------------------------------------------------------------------------------------

4. 댓글 ajax 
	
	작업		URI		Method		body(데이터)
	---------------------------------------------------------------------------------------
	댓글추가		/reply/add	POST
	댓글읽기		/reply/{repno}	GET
	댓글수정		/reply/{repno}	PUT		+ json 수정데이터
	댓글삭제		/reply/{repno} 	DELETE
	댓글목록 	/reply/list/{bno}/{page}	
	---------------------------------------------------------------------------------------




--------------------------------------------------2022-09-01----------------------------------------------------------------------------.

<sec:authorize access="isAuthenticated()"> 권한체크해주는 테그
	
<sec:authentication property="principal.username"/>

아이콘을 제공해주는 사이트
https://fontawesome.com/

<input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}" />----1

 <meta name="_csrf_header"  content="${_csrf.headerName}">----2
 <meta name="_csrf"  content="${_csrf.token}">
   
1과 2의 차이점


동적으로 생성된 것은 이벤트를 걸 수가 없음 아직 없을 수도 있기때문에 
문서상에 있는것만 이벤트 걸 수 있음$(".reply_container").on("click","button.replyBtn",function(){
그래서 이렇게 서브로 생성해준다.

5.실습

	- 댓글 수정/ 삭제 ajax 처리
	- 게시판 목록에 각 글마다 댓글 개수 띄우기




	(실습용 프로젝트)
	- 회원가입쪽 bootstrap으로 변경
	- 게시판 글 등록할때 파일 업로드
	- 댓글의 댓글
	


				$.ajax({
					type: "post",
					url: "/member/idAvail",
					data: {id : idVal},
					success: function(result){
						console.log("success");
						console.log(result);
						//결과를 '아이디사용가능여부' input태그의 value값으로 띄워 주기
						$("#checkResult").val(result);
					},
					error: function(e){ 
						console.log(e); 
					}
				});
			});
		});



	<%--시큐리티에서 principal 정보 pInfo 변수에 담기******중요 --%>
	               	<sec:authorize access="isAuthenticated()"> 		로그인 되었나요 확인
	               	<sec:authentication property="principal" var="pInfo"/>	로그인한 정보에서 pInfo 에 principal 을 집어넣어라 
	               		<c:if test="${pInfo.username eq board.writer}"> 거기에는 username 이 들어있으니까!
	                		<button class="btn btn-warning" data-service="modify">Modify</button>
	                	</c:if>
	               	</sec:authorize>


























	